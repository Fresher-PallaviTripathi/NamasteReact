 ‚óè What is Emmet?

Emmet is a plugin/tool for code editors (like VS Code, Sublime, etc.) that helps write HTML and CSS faster using abbreviations.

Example: Typing ul>li*3 and hitting Tab expands to:

<ul>
  <li></li>
  <li></li>
  <li></li>
</ul>




‚óè Difference between a Library and Framework?


Library

A library is a collection of pre-written code (functions, classes, etc.) that you can call whenever you need.

You control the flow of the program. You decide when and where to use the library functions.

It‚Äôs like a toolbox ‚Äì you pick the right tool (function) when you need it.

‚úÖ Examples:

JavaScript ‚Üí React.js (technically a library for UI)

Python ‚Üí NumPy, Pandas, Requests

Java ‚Üí JUnit

Framework

A framework is a bigger structure that defines the overall architecture of your project.

The framework controls the flow. You write your code inside the framework‚Äôs rules and structure.

It‚Äôs like a house under construction ‚Äì the framework gives you the foundation and walls, and you just add the furniture.

‚úÖ Examples:

JavaScript ‚Üí Angular, Vue.js, Next.js

Python ‚Üí Django, Flask

Java ‚Üí Spring

Key Difference (Rule of Thumb)

üëâ Library: You call the library ‚Üí you‚Äôre in control.
üëâ Framework: Framework calls your code ‚Üí framework is in control.

This is sometimes called the ‚ÄúInversion of Control‚Äù principle.

‚ö° Example:

If you use jQuery (library) ‚Üí you decide when to call $("#btn").click()

If you use Django (framework) ‚Üí Django decides when your function runs (like handling a request/response).



 * What is CDN? Why do we use it?

CDN stands for Content Delivery Network.

It‚Äôs a network of servers distributed globally to deliver static content (like JS, CSS, images) faster.

Why use it?

Reduces load on your own server

Increases speed and performance

Improves availability and redundancy

Example:

<script src="https://cdn.jsdelivr.net/npm/react@18/umd/react.development.js"></script>




‚óè Why is React known as React?

React is called "React" because:

It enables reactive and dynamic user interfaces.

It automatically reacts to data changes and updates the DOM efficiently using its virtual DOM.



‚óè What is crossorigin in script tag?

The crossorigin attribute is used when loading scripts from a different domain (CORS-related).

It controls how the browser handles cross-origin requests.

Common values:

anonymous ‚Äì No credentials (cookies, HTTP auth) sent.

use-credentials ‚Äì Sends credentials.

Example:

<script src="..." crossorigin="anonymous"></script>


Needed when:

Using CDNs

Ensuring proper error handling for crossorigin scripts




‚óè What is the difference between React and ReactDOM?

1. React

What it is:
React is the core library for building user interfaces.

Purpose:
It provides the components, hooks, and virtual DOM logic to create UI in a declarative way.

What it doesn‚Äôt do:
React by itself doesn‚Äôt know how or where to render your UI (to the browser, mobile app, etc.).

Use Case:
You use React to define components and UI logic.

‚úÖ Example:

import React from "react";

function App() {
  return <h1>Hello World</h1>;
}

2. ReactDOM

What it is:
ReactDOM is the library that lets React work specifically with the web browser DOM.

Purpose:
It provides methods to render React components into the actual HTML DOM.

Specialization:
ReactDOM is just one "renderer." There are others too, like React Native (for mobile), which doesn‚Äôt use ReactDOM.

‚úÖ Example:

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);


Here:

React ‚Üí lets you build the App component.

ReactDOM ‚Üí takes App and mounts it into the browser DOM at id="root".




‚óè Difference between react.development.js and react.production.js via CDN?


1. react.development.js

Unminified (big file size, readable code).

Contains helpful warnings, error messages, and checks for developers.

Useful during development/debugging, since it helps you catch mistakes (like invalid props, deprecated APIs, etc.).

Slower performance because of extra checks.

‚úÖ Example:

<script src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

2. react.production.min.js

Minified & optimized (small file size, unreadable code).

Removes all warnings, debug messages, and dev-only checks.

Runs faster and is designed for live websites.

Better for performance & loading speed.

‚úÖ Example:

<script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
<script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>



‚óè What is async and defer in script tag ?

Normal <script> tag

By default, when the browser sees a <script> tag:

It stops parsing the HTML.

Downloads the script.

Runs the script.

Then continues with HTML.

‚ö†Ô∏è This can make the page load slower if the script is large.

async attribute
<script src="script.js" async></script>


Script is downloaded in parallel with HTML parsing.

Once downloaded, the script is executed immediately, even if HTML parsing is not finished.

Multiple scripts with async may execute in random order (whichever finishes downloading first).

‚úÖ Good for: independent scripts (e.g., ads, analytics, tracking).
‚ùå Not good for: scripts that depend on each other or on HTML structure.

defer attribute
<script src="script.js" defer></script>


Script is downloaded in parallel with HTML parsing.

But execution is deferred until after the HTML is fully parsed.

Scripts with defer are executed in order, as they appear in the page.

‚úÖ Good for: main application scripts (React, Angular, etc.), DOM-related scripts.
‚ùå Not for: scripts that must run immediately.

Coding assignment:::




1-How Create hello world! in HTML


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Namaste-React</title>
</head>
<body>
    <div id="root">
      <h1>Hello world!</h1>  
    </div>
</body>
</html>


2- How Create hello world! in JS

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Namaste-React</title>
  </head>
  <body>
    <div id="root"></div>
    <script>
      const heading = document.createElement("h1");
      heading.innerHTML = "Hello World! from JavaScript";

      const root = document.getElementById("root");
      root.appendChild(heading);
    </script>
  </body>
</html>


 3-How Create hello world! in React

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Namaste-React</title>
  </head>
  <body>
    <div id="root"></div>
    <script
      crossorigin
      src="https://unpkg.com/react@18/umd/react.development.js"
    ></script>
    <script
      crossorigin
      src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"
    ></script>

    <script>
      const heading = React.createElement(
        "h1", //heading
        { id: "heading", abc: "xyz" }, //id or heading  and attribute
        "Hello World! from React" // what data we want to put in h1
      );

      // console.log(heading); //Object

      const root = ReactDOM.createRoot(document.getElementById("root"));

      root.render(heading);
    </script>
  </body>
</html>