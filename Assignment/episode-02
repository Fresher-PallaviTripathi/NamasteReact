 # 1. NPM:

Used to install, manage, and share JavaScript packages.

Example:

npm install react

Can also run scripts like npm start, npm build.

# 2. Parcel / Webpack

Module bundlers: Combine JS, CSS, images, etc., into optimized files.

Why needed:

Multiple files/assets → one optimized bundle for browser.

Supports ES6 modules, transpiling (Babel), CSS preprocessors.

# 3. .parcel-cache

Folder created by Parcel to store cached build files.

Purpose: Speeds up build by reusing previous compilations.

# 4. npx

Comes with npm.

Runs a package without installing it globally.

Example:

npx create-react-app my-app

# 5. dependencies vs devDependencies
   Dependencies             DevDependencies
   Required in production   Required only for development
   Example: React, Axios    Example: Webpack, Babel, ESLint

Commands:

npm install package-name # dependencies
npm install package-name --save-dev # devDependencies

# 6. Tree Shaking

Removes unused code from final bundle.

Reduces bundle size.

Example: Import 5 functions but use 2 → unused 3 removed.

# 7. Hot Module Replacement (HMR)

Updates modules in browser without full reload.

Speeds up development and preserves app state.

# 8. Parcel Superpowers

5 Superpowers:

Zero Configuration

Fast Bundling

Hot Module Replacement

Automatic Transpiling (Babel, TypeScript)

Tree Shaking

Explanation of 3:

Zero Configuration: Works out-of-the-box, no config needed.

HMR: Changes appear instantly in browser, state preserved.

Tree Shaking: Only used code is bundled; unused code removed.

# 9. .gitignore

Tells Git which files/folders not to track.

Add: node_modules/, dist/, .parcel-cache, .env

Do not add: src/, public/

# 10. package.json vs package-lock.json
        package.json                                     package-lock.json
    Lists project metadata & dependencies       Records exact installed versions
    Editable manually                           Auto-generated by npm, do not edit manually
# 11. Why not modify package-lock.json?

Ensures consistent dependency versions across machines.

Editing can cause broken dependencies or bugs.

# 12. node_modules

Contains all installed packages for project.

Do not push to Git; huge size, package.json can reinstall.

# 13. dist folder

Distribution folder: production-ready build (minified JS, CSS, assets).

Example: parcel build index.html → dist/ created.

# 14. browserslist

Defines which browsers to support.

Example in package.json:

"browserslist": [
"last 2 versions",
"> 1%",
"not dead"
]

Used by Babel, Autoprefixer, Parcel for compatibility.
